//
// Created by jeune on 07/02/2023.
//

// y² = x^3 + ax + b

//Symétrie A(x,y) => B(x,-y)

/**
 *
 * TODO:
 *  2/ Point doubling: Given a point P on the curve, this method calculates
 *  the point 2P such that 2P is another point on the curve.
 *  This is done by finding the tangent to the curve at P and finding
 *  the second point where this tangent intersects the curve.
 *
 * TODO:
 *  3/Scalar multiplication: Given a point P on the curve and a scalar value k,
 *  this method calculates the point kP such that kP is another point on the curve.
 *  This is done by repeatedly adding P to itself k times,
 *  or by using faster algorithms such as double-and-add or Montgomery ladder.
 *
 * TODO:
 *  4/Point compression: Given a point P on the curve, this method compresses the point
 *  into a fixed-length representation for efficient storage and transmission.
 *  This is typically done by encoding the x-coordinate of the point
 *  and a flag indicating whether the y-coordinate is even or odd.
 *
 * TODO:
 *  5/Point decompression: Given a compressed point representation,
 *  this method decompresses the point back into its original form on the curve.
 *
 * TODO:
 *  6/Key generation: This method generates a public/private key pair for use in ECIH.
 *  The private key is a scalar value and the public key is a point on the curve.
 *  The public key is generated by multiplying the private key by the generator point of the curve.
 *
 * TODO:
 *  7/Signature generation: Given a message and a private key,
 *  this method generates a digital signature for the message.
 *  The signature is typically a pair of values that can be verified using the public key and the message.
 *
 * TODO:
 *  8/Signature verification: Given a signature, a message, and a public key,
 *  this method verifies whether the signature is a valid signature for the message.
 *  If the signature is valid, the method returns true, otherwise it returns false.
 */
template <long long A, long long B>
class EllipticCurve {
    long long a;
    long long b;

    EllipticCurve() : a(A), b(B) {};
};


//EVA01_ELLIPTICCURVE_H
